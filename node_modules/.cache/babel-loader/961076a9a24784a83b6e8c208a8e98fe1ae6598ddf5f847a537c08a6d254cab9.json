{"ast":null,"code":"const getAllMovies = () => {\n  return fetch(\"https://rancid-tomatillos-api-ce4a3879078e.herokuapp.com/api/v1/movies\", {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 500) {\n        throw new Error(\"Oopsie! Nothing to see here!\");\n      } else if (response.status >= 500) {\n        throw new Error(\"Oopsie! Something went wrong, please try again later.\");\n      } else {\n        throw new Error(`Unexpected error. Status: ${response.status}`);\n      }\n    }\n    return response.json();\n  }).then(data => {\n    if (Array.isArray(data)) {\n      return {\n        movies: data\n      };\n    }\n    if (data && data.movies) {\n      return data;\n    }\n    throw new Error(\"Invalid data format received\");\n  }).catch(error => {\n    throw error;\n  });\n};\nconst getSelectedMovie = id => {\n  return fetch(`https://rancid-tomatillos-api-ce4a3879078e.herokuapp.com/api/v1/movies/${id}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      if (response.status >= 400 && response.status < 500) {\n        throw new Error(\"Oopsie! Nothing to see here!\");\n      } else if (response.status >= 500) {\n        throw new Error(\"Oopsie! Something went wrong, please try again later.\");\n      } else {\n        throw new Error(`Unexpected error. Status: ${response.status}`);\n      }\n    }\n    return response.json();\n  }).then(data => {\n    if (data && data.movie) {\n      return data;\n    }\n    if (data && data.id) {\n      return {\n        movie: data\n      };\n    }\n    throw new Error(\"Invalid movie data format received\");\n  });\n};\nexport { getAllMovies, getSelectedMovie };","map":{"version":3,"names":["getAllMovies","fetch","method","headers","then","response","ok","status","Error","json","data","Array","isArray","movies","catch","error","getSelectedMovie","id","movie"],"sources":["/Users/bobby/projects/rancid-tomatillos-solo/src/apiCalls.js"],"sourcesContent":["const getAllMovies = () => {\n  return fetch(\"https://rancid-tomatillos-api-ce4a3879078e.herokuapp.com/api/v1/movies\", {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n    .then((response) => {\n      if (!response.ok) {\n        if (response.status >= 400 && response.status < 500) {\n          throw new Error(\"Oopsie! Nothing to see here!\");\n        } else if (response.status >= 500) {\n          throw new Error(\"Oopsie! Something went wrong, please try again later.\");\n        } else {\n          throw new Error(`Unexpected error. Status: ${response.status}`);\n        }\n      }\n      return response.json();\n    })\n    .then(data => {\n      if (Array.isArray(data)) {\n        return { movies: data };\n      }\n      if (data && data.movies) {\n        return data;\n      }\n      throw new Error(\"Invalid data format received\");\n    })\n    .catch(error => {\n      throw error;\n    });\n};\n\nconst getSelectedMovie = (id) => {\n  return fetch(`https://rancid-tomatillos-api-ce4a3879078e.herokuapp.com/api/v1/movies/${id}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n    .then((response) => {\n      if (!response.ok) {\n        if (response.status >= 400 && response.status < 500) {\n          throw new Error(\"Oopsie! Nothing to see here!\");\n        } else if (response.status >= 500) {\n          throw new Error(\"Oopsie! Something went wrong, please try again later.\");\n        } else {\n          throw new Error(`Unexpected error. Status: ${response.status}`);\n        }\n      }\n      return response.json();\n    })\n    .then(data => {\n      if (data && data.movie) {\n        return data;\n      }\n      if (data && data.id) {\n        return { movie: data };\n      }\n      throw new Error(\"Invalid movie data format received\");\n    });\n};\n\nexport { getAllMovies, getSelectedMovie };"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAAA,KAAM;EACzB,OAAOC,KAAK,CAAC,wEAAwE,EAAE;IACrFC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,IAAID,QAAQ,CAACE,MAAM,IAAI,GAAG,IAAIF,QAAQ,CAACE,MAAM,GAAG,GAAG,EAAE;QACnD,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC,MAAM,IAAIH,QAAQ,CAACE,MAAM,IAAI,GAAG,EAAE;QACjC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;MAC1E,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,6BAA4BH,QAAQ,CAACE,MAAO,EAAC,CAAC;MACjE;IACF;IACA,OAAOF,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;IACZ,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;MACvB,OAAO;QAAEG,MAAM,EAAEH;MAAK,CAAC;IACzB;IACA,IAAIA,IAAI,IAAIA,IAAI,CAACG,MAAM,EAAE;MACvB,OAAOH,IAAI;IACb;IACA,MAAM,IAAIF,KAAK,CAAC,8BAA8B,CAAC;EACjD,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;IACd,MAAMA,KAAK;EACb,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,gBAAgB,GAAIC,EAAE,IAAK;EAC/B,OAAOhB,KAAK,CAAE,0EAAyEgB,EAAG,EAAC,EAAE;IAC3Ff,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,IAAID,QAAQ,CAACE,MAAM,IAAI,GAAG,IAAIF,QAAQ,CAACE,MAAM,GAAG,GAAG,EAAE;QACnD,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC,MAAM,IAAIH,QAAQ,CAACE,MAAM,IAAI,GAAG,EAAE;QACjC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;MAC1E,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,6BAA4BH,QAAQ,CAACE,MAAO,EAAC,CAAC;MACjE;IACF;IACA,OAAOF,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;IACZ,IAAIA,IAAI,IAAIA,IAAI,CAACQ,KAAK,EAAE;MACtB,OAAOR,IAAI;IACb;IACA,IAAIA,IAAI,IAAIA,IAAI,CAACO,EAAE,EAAE;MACnB,OAAO;QAAEC,KAAK,EAAER;MAAK,CAAC;IACxB;IACA,MAAM,IAAIF,KAAK,CAAC,oCAAoC,CAAC;EACvD,CAAC,CAAC;AACN,CAAC;AAED,SAASR,YAAY,EAAEgB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}